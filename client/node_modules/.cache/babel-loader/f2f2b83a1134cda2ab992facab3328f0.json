{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u044E\\u0437\\u0435\\u0440\\\\Downloads\\\\grey-music-player-main\\\\grey-music-player-main\\\\src\\\\components\\\\audioPlayer\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./audioPlayer.css\";\nimport Controls from \"./controls\";\nimport ProgressCircle from \"./progressCircle\";\nimport WaveAnimation from \"./waveAnimation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudioPLayer(_ref) {\n  _s();\n\n  var _total$currentIndex, _total$, _currentTrack$album, _currentTrack$album2, _currentTrack$album2$;\n\n  let {\n    currentTrack,\n    currentIndex,\n    setCurrentIndex,\n    total\n  } = _ref;\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [trackProgress, setTrackProgress] = useState(0);\n  var audioSrc = (_total$currentIndex = total[currentIndex]) === null || _total$currentIndex === void 0 ? void 0 : _total$currentIndex.track.preview_url;\n  const audioRef = useRef(new Audio((_total$ = total[0]) === null || _total$ === void 0 ? void 0 : _total$.track.preview_url));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? trackProgress / duration * 100 : 0;\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        handleNext();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  useEffect(() => {\n    if (audioRef.current.src) {\n      if (isPlaying) {\n        audioRef.current.play();\n        startTimer();\n      } else {\n        clearInterval(intervalRef.current);\n        audioRef.current.pause();\n      }\n    } else {\n      if (isPlaying) {\n        audioRef.current = new Audio(audioSrc);\n        audioRef.current.play();\n        startTimer();\n      } else {\n        clearInterval(intervalRef.current);\n        audioRef.current.pause();\n      }\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(audioSrc);\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [currentIndex]);\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  const handleNext = () => {\n    if (currentIndex < total.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    } else setCurrentIndex(0);\n  };\n\n  const handlePrev = () => {\n    if (currentIndex - 1 < 0) setCurrentIndex(total.length - 1);else setCurrentIndex(currentIndex - 1);\n  };\n\n  const addZero = n => {\n    return n > 9 ? \"\" + n : \"0\" + n;\n  };\n\n  const artists = [];\n  currentTrack === null || currentTrack === void 0 ? void 0 : (_currentTrack$album = currentTrack.album) === null || _currentTrack$album === void 0 ? void 0 : _currentTrack$album.artists.forEach(artist => {\n    artists.push(artist.name);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-body flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-left-body\",\n      children: /*#__PURE__*/_jsxDEV(ProgressCircle, {\n        percentage: currentPercentage,\n        isPlaying: true,\n        image: currentTrack === null || currentTrack === void 0 ? void 0 : (_currentTrack$album2 = currentTrack.album) === null || _currentTrack$album2 === void 0 ? void 0 : (_currentTrack$album2$ = _currentTrack$album2.images[0]) === null || _currentTrack$album2$ === void 0 ? void 0 : _currentTrack$album2$.url,\n        size: 300,\n        color: \"#C96850\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-right-body flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"song-title\",\n        children: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"song-artist\",\n        children: artists.join(\" | \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-right-bottom flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-duration flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"duration\",\n            children: [\"0:\", addZero(Math.round(trackProgress))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(WaveAnimation, {\n            isPlaying: isPlaying\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"duration\",\n            children: \"0:30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {\n          isPlaying: isPlaying,\n          setIsPlaying: setIsPlaying,\n          handleNext: handleNext,\n          handlePrev: handlePrev,\n          total: total\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AudioPLayer, \"87yB0e0CsUpyGlS/YvMKAm7yFec=\");\n\n_c = AudioPLayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPLayer\");","map":{"version":3,"sources":["C:/Users/юзер/Downloads/grey-music-player-main/grey-music-player-main/src/components/audioPlayer/index.js"],"names":["React","useState","useRef","useEffect","Controls","ProgressCircle","WaveAnimation","AudioPLayer","currentTrack","currentIndex","setCurrentIndex","total","isPlaying","setIsPlaying","trackProgress","setTrackProgress","audioSrc","track","preview_url","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","startTimer","clearInterval","setInterval","ended","handleNext","currentTime","src","play","pause","length","handlePrev","addZero","n","artists","album","forEach","artist","push","name","images","url","join","Math","round"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./audioPlayer.css\";\nimport Controls from \"./controls\";\nimport ProgressCircle from \"./progressCircle\";\nimport WaveAnimation from \"./waveAnimation\";\n\nexport default function AudioPLayer({\n  currentTrack,\n  currentIndex,\n  setCurrentIndex,\n  total,\n}) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [trackProgress, setTrackProgress] = useState(0);\n  var audioSrc = total[currentIndex]?.track.preview_url;\n\n  const audioRef = useRef(new Audio(total[0]?.track.preview_url));\n\n  const intervalRef = useRef();\n\n  const isReady = useRef(false);\n\n  const { duration } = audioRef.current;\n\n  const currentPercentage = duration ? (trackProgress / duration) * 100 : 0;\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        handleNext();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  useEffect(() => {\n    if (audioRef.current.src) {\n      if (isPlaying) {\n        audioRef.current.play();\n        startTimer();\n      } else {\n        clearInterval(intervalRef.current);\n        audioRef.current.pause();\n      }\n    } else {\n      if (isPlaying) {\n        audioRef.current = new Audio(audioSrc);\n        audioRef.current.play();\n        startTimer();\n      } else {\n        clearInterval(intervalRef.current);\n        audioRef.current.pause();\n      }\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(audioSrc);\n\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  const handleNext = () => {\n    if (currentIndex < total.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    } else setCurrentIndex(0);\n  };\n\n  const handlePrev = () => {\n    if (currentIndex - 1 < 0) setCurrentIndex(total.length - 1);\n    else setCurrentIndex(currentIndex - 1);\n  };\n\n  const addZero = (n) => {\n    return n > 9 ? \"\" + n : \"0\" + n;\n  };\n  const artists = [];\n  currentTrack?.album?.artists.forEach((artist) => {\n    artists.push(artist.name);\n  });\n  return (\n    <div className=\"player-body flex\">\n      <div className=\"player-left-body\">\n        <ProgressCircle\n          percentage={currentPercentage}\n          isPlaying={true}\n          image={currentTrack?.album?.images[0]?.url}\n          size={300}\n          color=\"#C96850\"\n        />\n      </div>\n      <div className=\"player-right-body flex\">\n        <p className=\"song-title\">{currentTrack?.name}</p>\n        <p className=\"song-artist\">{artists.join(\" | \")}</p>\n        <div className=\"player-right-bottom flex\">\n          <div className=\"song-duration flex\">\n            <p className=\"duration\">0:{addZero(Math.round(trackProgress))}</p>\n            <WaveAnimation isPlaying={isPlaying} />\n            <p className=\"duration\">0:30</p>\n          </div>\n          <Controls\n            isPlaying={isPlaying}\n            setIsPlaying={setIsPlaying}\n            handleNext={handleNext}\n            handlePrev={handlePrev}\n            total={total}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}